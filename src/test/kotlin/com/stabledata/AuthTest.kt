package com.stabledata

import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import io.ktor.server.testing.*
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull

const val NODE_GENERATED_TOKEN = "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImJlbiJ9.92gaKus91nY1UP22qwfDABP7o1l59kJ2HbnBEfwiyqc"


class AuthTest {

    @Test
    fun `authorizes calls with node generated tokens` () = testApplication {
        application {
            module()
        }

        val response = client.get("/secure") {
            headers {
                append(HttpHeaders.Authorization, "Bearer $NODE_GENERATED_TOKEN")
            }

        }
        assertEquals(HttpStatusCode.OK, response.status)
        assertEquals("secured", response.bodyAsText())
    }

    @Test
    fun `authorizes calls with ktor generated tokens` () = testApplication {
        application {
            module()
        }

        val token = generateJwtTokenWithCredentials(UserCredentials("ben"))
        val response = client.get("/secure") {
            headers {
                append(HttpHeaders.Authorization, "Bearer $token")
            }

        }
        assertEquals(HttpStatusCode.OK, response.status)
        assertEquals("secured", response.bodyAsText())
    }

    @Test
    fun `generate JWT` () {
        val jwt = generateJwtTokenWithCredentials(UserCredentials("ben"))
        println(jwt)
    }

    @Test
    fun `verify JWT` () {
        // this token was generated by jose lib.
        // of note, others did not seem to work
        val v = verifyToken(NODE_GENERATED_TOKEN)
        assertNotNull(v)
    }
}